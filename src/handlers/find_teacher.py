from datetime import datetime

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards.find_teacher import find_teacher_keyboard, build_teacher_list_kb, try_again_name_kb, build_date_change_keyboard, build_days_keyboard, build_teacher_schedule_month_keyboard
from utils.message_generators import generate_teacher_schedule_message
from utils.api.schedule import LessonAPI, TeacherAPI

router = Router()

class FindTeacher(StatesGroup):
    teacher_name = State()

async def get_teacher_list(name: str = ''):
    resp = await TeacherAPI.get()
    teachers = resp.json
    if name:
        teachers = [teacher for teacher in teachers if name.lower() in teacher.get('short_name').lower()]
    return teachers

async def get_teacher_schedule(teacher_id: int, date: str):
    date = datetime.strptime(date, '%Y-%m-%d')
    resp = await LessonAPI.get(teacher_id=teacher_id, date=date)
    lessons = resp.json
    new_lessons = {}
    resp = await TeacherAPI.get(teacher_id=teacher_id)
    teacher = resp.json[0]
    for lesson in lessons:
        time = lesson.get('time_from')
        if not new_lessons.get(time):
            new_lessons[time] = lesson
    message = await generate_teacher_schedule_message(sorted(new_lessons.values(), key=lambda x: x.get('time_from')), date, teacher)
    keyboard = await build_date_change_keyboard(date, teacher_id)
    return message, keyboard

@router.message(F.text == 'üîç –ù–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
async def find_teacher(message: types.Message):
    await message.answer(
        'üîç <b>–ù–µ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è?</b>\n\n'
        '–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –Ω–∞ –∫–∞–∫–æ–º –∑–∞–Ω—è—Ç–∏–∏ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, '
        '—á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å –æ–∫–æ–ª–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–ª–∏ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫–∏.\n\n'
        '<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –¢–æ –µ—Å—Ç—å –º—ã –Ω–µ –º–æ–∂–µ–º —Å–∫–∞–∑–∞—Ç—å –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç—É –ø–∞—Ä\n\n'
        '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞.',
        reply_markup=find_teacher_keyboard.as_markup(),
    )

@router.callback_query(F.data == 'teacher_name')
async def get_teacher_name(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
    await state.set_state(FindTeacher.teacher_name)

@router.message(FindTeacher.teacher_name)
async def get_teacher_list_by_name(message: types.Message, state: FSMContext):
    teacher_name = message.text
    await state.clear()
    teachers = await get_teacher_list(name=teacher_name)
    if not teachers:
        await message.answer('–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–æ', reply_markup=try_again_name_kb.as_markup())
        return
    kb = await build_teacher_list_kb(teachers, teacher_filter=teacher_name)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è', reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith('teacher_list_'))
async def get_full_teacher_list(callback: types.CallbackQuery):
    teacher_filter, page = callback.data.split('_')[-2:]
    teachers = await get_teacher_list(name=teacher_filter)
    kb = await build_teacher_list_kb(teachers, page=int(page), teacher_filter=teacher_filter)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è', reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith('get_teacher_schedule_'))
async def get_teacher_schedule_from_inline(callback: types.CallbackQuery):
    teacher_id, date = callback.data.split('_')[-2:]
    message, kb = await get_teacher_schedule(teacher_id=int(teacher_id), date=date)
    await callback.message.edit_text(message, reply_markup=kb.as_markup())


@router.callback_query(F.data.startswith('teacher_schedule_date_choice'))
async def schedule_date_choice(callback: types.CallbackQuery):
    teacher_id = callback.data.split('_')[-1]
    kb = await build_teacher_schedule_month_keyboard(teacher_id=int(teacher_id))
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü', reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith('teacher_schedule_month_set'))
async def schedule_month_set(callback: types.CallbackQuery):
    teacher_id, month_index = callback.data.split('_')[-2:]
    kb = await build_days_keyboard(int(month_index), teacher_id=int(teacher_id))
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å', reply_markup=kb.as_markup())
