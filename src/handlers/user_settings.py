
from aiogram import Router, F, types, filters

from http import HTTPStatus

from bot_instance import bot
from keyboards import user_settings, main_menu
from keyboards.consts import INDEX_INSTITUTE
from utils.api.user import StudentAPI
from utils.api.group import GroupAPI

settings_router = Router()

# class AuthForm(StatesGroup):
#     email = State()
#     code = State()

# @settings_router.callback_query(F.data == 'auth', flags={'auth_handler': True})
# async def user_authorization(callback: types.CallbackQuery, state: FSMContext):
#     user_id = callback.from_user.id

#     await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É *–ø–æ—á—Ç—É*', parse_mode='Markdown')
#     await state.set_state(AuthForm.email)


# @settings_router.message(AuthForm.email, flags={'auth_handler': True})
# async def auth_by_email(message: types.Message, state: FSMContext):
#     email = message.text
#     user_id = message.from_user.id
#     user = await get_user_by_email(email=email)
#     if user:
#         student_id = user.get('telegram_id')
#         if student_id:
#             await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É Telegram\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
#             await state.clear()
#         else:
#             updated_user = await update_user(id=user.get('id'), telegram_id=user_id)
#             if updated_user:
#                 await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç')
#                 await state.clear()
#         return
#     else:
#         _, status = await create_user(email=email, telegram_id=user_id)
#         if status == 201:
#             await state.update_data(email=email)
#             await message.answer('–ù–∞ –≤–∞—à—É –ø–æ—á—Ç—É –±—ã–ª –≤—ã—Å–ª–∞–Ω –∫–æ–¥.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞\n')
#             await state.set_state(AuthForm.code)
#             return
#         elif status == 403:
#             await state.update_data(email=email)
#             await message.answer('–ü–æ–ø—ã—Ç–æ–∫ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É')
#             await state.clear()
#             return

#     await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –≤—Ö–æ–¥–µ –≤ –Ω–µ–≥–æ')
#     await state.clear()


# @settings_router.message(AuthForm.code, flags={'auth_handler': True})
# async def confirm_code(message: types.Message, state: FSMContext):
#     data = await state.get_data()
#     email = data.get('email')
#     code = message.text
#     user, status = await confirm_create_user(code=code, email=email)
#     if status == 201:
#         kb = await settings.build_degree_keyboard()
#         await message.answer('–ê–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å', reply_markup=kb.as_markup())
#         await state.clear()
#     elif status == 400:
#         await message.answer(f'–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {user['detail'].get('attempts')}')
#     elif status == 403:
#         await message.answer('–ü–æ–ø—ã—Ç–æ–∫ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É')
#         await state.clear()
#     else:
#         await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
#         await state.clear()


@settings_router.message(filters.Command('connect'))
async def connect_group(message: types.Message):
    user_id = message.from_user.id
    resp = await StudentAPI.get(telegram_id=user_id)
    user = resp.get('json')
    if user and (group_id := user.get('group_id')):
        lead_check = await StudentAPI.check_group_leadership(user_id=user.get('id'), group_id=group_id)
        if lead_check:
            status_code = await GroupAPI.patch(group_id=group_id, chat_id=message.chat.id)
            if status_code == HTTPStatus.NO_CONTENT:
                await message.reply('–ß–∞—Ç –≥—Ä—É–ø–ø—ã –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω')
                return
    await message.reply('–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–∞ –∫ –±–æ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ —Å—Ç–∞—Ä–æ—Å—Ç—ã –≥—Ä—É–ø–ø—ã')

@settings_router.callback_query(F.data == 'create_profile')
async def create_profile(callback: types.CallbackQuery):
    kb = await user_settings.build_institute_keyboard()
    await callback.message.edit_text('–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç', reply_markup=kb.as_markup())

@settings_router.callback_query(F.data.startswith('set_institute'))
async def set_user_institute(callback: types.CallbackQuery):
    institute = INDEX_INSTITUTE[int(callback.data.split('_')[-1])]
    keyboard = await user_settings.build_degree_keyboard(institute=institute)
    await callback.message.edit_text('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫—É—Ä—Å', reply_markup=keyboard.as_markup())

@settings_router.callback_query(F.data.startswith('set_degree'))
async def set_user_degree(callback: types.CallbackQuery):
    degree = int(callback.data.split('_')[-1])
    institute = INDEX_INSTITUTE[int(callback.data.split('_')[-2])]
    keyboard = await user_settings.build_group_keyboard(institute=institute, degree=degree)
    await callback.message.edit_text('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É', reply_markup=keyboard.as_markup())


@settings_router.callback_query(F.data.startswith('set_group'))
async def set_user_group(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    group_id = int(callback.data.split('_')[-1])
    resp = await GroupAPI.get_by_id(group_id)
    group = resp.json
    resp = await StudentAPI.post(telegram_id=user_id, group_id=group_id)
    user = resp.json[0]
    if user:
        kb = await main_menu.build_main_keyboard()
        await callback.message.delete()
        await bot.send_message(
            chat_id=user_id,
            text=(
                'üéâ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n'
                'üìö –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ, –≤–∫–ª—é—á–∞—è –∫—É—Ä—Å –∏ –≥—Ä—É–ø–ø—É, –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.\n\n' +
                ('üìå <b>–í–∞–∂–Ω–æ!</b> –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É, —Å—Ç–∞—Ä–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≥—Ä—É–ø–ø—É –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. (–µ—Å–ª–∏ –≤—ã —è–≤–ª—è–µ–µ—Ç–µ—Å—å –∏–º, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ @test)'
                '–ï—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª —ç—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–æ–º–Ω–∏—Ç–µ –µ–º—É –æ–± —ç—Ç–æ–º. –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π, '
                '–∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ–±–ª–µ–≥—á–∞—Ç —É—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!\n'
                '' if group and not group.get('chat_id') or not group.get('group_leader_id') else '')
            ),
            reply_markup=kb.as_markup(resize_keyboard=True),
        )
    else:
        await callback.message.edit_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
