import logging
from http import HTTPStatus

from aiogram import F, Router, filters, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot_instance import bot
from main_menu.keyboard import build_main_keyboard
from schedule.consts import INDEX_INSTITUTE
from schedule.keyboard import (
    build_degree_keyboard,
    build_group_keyboard,
    build_institute_keyboard,
)
from student.api import GroupAPI, StudentAPI
from student.keyboard import build_profile_change_kb, profile_kb
from student.utils import generate_profile_message

student_router = Router()


@student_router.message(filters.Command("connect"))
async def connect_group(message: types.Message):
    user_id = message.from_user.id
    resp = await StudentAPI.get(telegram_id=user_id)
    user = resp.get("json")
    if user and (group_id := user.get("group_id")):
        lead_check = await StudentAPI.check_group_leadership(
            user_id=user.get("id"),
            group_id=group_id,
        )
        if lead_check:
            status_code = await GroupAPI.patch(
                group_id=group_id,
                chat_id=message.chat.id,
            )
            if status_code == HTTPStatus.NO_CONTENT:
                await message.reply("–ß–∞—Ç –≥—Ä—É–ø–ø—ã –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return
    await message.reply(
        "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–∞ –∫ –±–æ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ —Å—Ç–∞—Ä–æ—Å—Ç—ã –≥—Ä—É–ø–ø—ã",
    )


@student_router.callback_query(F.data == "create_profile")
async def create_profile(callback: types.CallbackQuery):
    kb = await build_institute_keyboard()
    await callback.message.edit_text(
        "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç",
        reply_markup=kb.as_markup(),
    )


@student_router.callback_query(F.data == "change_group")
async def change_group(callback: types.CallbackQuery):
    kb = await build_institute_keyboard(profile=True)
    await callback.message.edit_text(
        "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç",
        reply_markup=kb.as_markup(),
    )


@student_router.callback_query(F.data.startswith("set_institute"))
async def set_user_institute(callback: types.CallbackQuery):
    institute = INDEX_INSTITUTE[int(callback.data.split("_")[-1])]
    keyboard = await build_degree_keyboard(institute=institute)
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫—É—Ä—Å",
        reply_markup=keyboard.as_markup(),
    )


@student_router.callback_query(F.data.startswith("set_degree"))
async def set_user_degree(callback: types.CallbackQuery):
    degree = int(callback.data.split("_")[-1])
    institute = INDEX_INSTITUTE[int(callback.data.split("_")[-2])]
    keyboard = await build_group_keyboard(
        institute=institute,
        degree=degree,
    )
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø",
        reply_markup=keyboard.as_markup(),
    )


@student_router.callback_query(F.data.startswith("set_group"))
async def set_user_group(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    group_id = int(callback.data.split("_")[-1])
    resp = await GroupAPI.get_by_id(group_id)
    group = resp.json
    resp = await StudentAPI.post(
        json_data={"telegram_id": user_id, "group_id": group_id},
    )
    if resp.status == HTTPStatus.CREATED:
        kb = await build_main_keyboard()
        await callback.message.delete()
        await bot.send_message(
            chat_id=user_id,
            text=(
                "üéâ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n"
                "üìö –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ, –≤–∫–ª—é—á–∞—è –∫—É—Ä—Å –∏ –≥—Ä—É–ø–ø—É, –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.\n\n"
                + (
                    "üìå <b>–í–∞–∂–Ω–æ!</b> –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É, —Å—Ç–∞—Ä–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≥—Ä—É–ø–ø—É –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. (–µ—Å–ª–∏ –≤—ã —è–≤–ª—è–µ–µ—Ç–µ—Å—å –∏–º, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ @test)"
                    "–ï—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª —ç—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–æ–º–Ω–∏—Ç–µ –µ–º—É –æ–± —ç—Ç–æ–º. –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π, "
                    "–∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ–±–ª–µ–≥—á–∞—Ç —É—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!\n"
                    ""
                    if group
                    and not group.get("chat_id")
                    or not group.get("group_leader_id")
                    else ""
                )
            ),
            reply_markup=kb.as_markup(resize_keyboard=True),
        )
    else:
        logging.error(resp.json)
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


class StudentData(StatesGroup):
    first_name = State()
    last_name = State()
    student_id = State()


@student_router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å / –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def profile_handler(message: types.Message):
    user_id = message.from_user.id
    resp = await StudentAPI.get(telegram_id=user_id)
    user = resp.json[0]
    message_text = await generate_profile_message(user)

    await message.answer(
        message_text,
        reply_markup=profile_kb.as_markup(),
    )


@student_router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    resp = await StudentAPI.get(telegram_id=user_id)
    user = resp.json[0]
    message_text = await generate_profile_message(user)

    await callback.message.edit_text(
        message_text,
        reply_markup=profile_kb.as_markup(),
    )


@student_router.callback_query(F.data == "logout")
async def logout(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    resp = await StudentAPI.get(telegram_id=user_id)
    user = resp.json[0]
    if user:
        is_updated = await StudentAPI.patch(user.get("id"), telegram_id=None)
        if is_updated:
            await callback.message.edit_text(
                text="–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!",
            )
            return
    await bot.send_message(
        user_id,
        text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
    )


@student_router.callback_query(F.data == "change_profile_data")
async def change_profile_data(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    kb = await build_profile_change_kb(user_id=user_id)
    await callback.message.edit_text(
        text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
        reply_markup=kb.as_markup(),
    )


@student_router.callback_query(F.data.startswith("profile_set_institute"))
async def change_institute(callback: types.CallbackQuery):
    institute = INDEX_INSTITUTE[int(callback.data.split("_")[-1])]
    kb = await build_degree_keyboard(institute=institute, profile=True)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å",
        reply_markup=kb.as_markup(),
    )


@student_router.callback_query(F.data.startswith("profile_set_degree"))
async def change_degree(callback: types.CallbackQuery):
    degree = int(callback.data.split("_")[-1])
    institute = INDEX_INSTITUTE[int(callback.data.split("_")[-2])]
    keyboard = await build_group_keyboard(
        institute=institute,
        degree=degree,
        profile=True,
    )
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É",
        reply_markup=keyboard.as_markup(),
    )


@student_router.callback_query(F.data.startswith("profile_set_group"))
async def set_profile_user_group(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    group_id = int(callback.data.split("_")[-1])
    resp = await StudentAPI.get(telegram_id=user_id)
    user = resp.json[0]
    updated_user = await StudentAPI.patch(user.get("id"), group_id=group_id)
    if updated_user.ok:
        kb = await build_profile_change_kb(user_id)
        await callback.message.edit_text(
            "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
            reply_markup=kb.as_markup(),
        )
    else:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@student_router.callback_query(F.data == "change_first_name")
async def change_first_name(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
    await state.set_state(StudentData.first_name)


@student_router.message(StudentData.first_name)
async def set_first_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    first_name = message.text
    resp = await StudentAPI.get(telegram_id=user_id)
    user = resp.json[0]
    is_updated = await StudentAPI.patch(user.get("id"), first_name=first_name)
    if is_updated.ok:
        kb = await build_profile_change_kb(user_id=user_id)
        await bot.send_message(
            user_id,
            "–ò–º—è –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ",
            reply_markup=kb.as_markup(),
        )

    else:
        await bot.send_message(
            user_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
        )
    await state.clear()


@student_router.callback_query(F.data == "change_last_name")
async def change_last_name(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é")
    await state.set_state(StudentData.last_name)


@student_router.message(StudentData.last_name)
async def set_last_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    last_name = message.text
    resp = await StudentAPI.get(telegram_id=user_id)
    user = resp.json[0]
    is_updated = await StudentAPI.patch(user.get("id"), last_name=last_name)
    if is_updated.ok:
        kb = await build_profile_change_kb(user_id=user_id)
        await bot.send_message(
            user_id,
            "–§–∞–º–∏–ª–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞",
            reply_markup=kb.as_markup(),
        )
    else:
        await bot.send_message(
            user_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
        )
    await state.clear()
